apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: $CI_PROJECT_NAME
  name: $CI_PROJECT_NAME
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: $CI_PROJECT_NAME
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: $CI_PROJECT_NAME
      annotations:
        co.elastic.logs: "false"
    spec:
      containers:
        - image: $CONTAINER_IMAGE
          imagePullPolicy: Always
          command: [ "app", "webserver" ]
          envFrom:
            - configMapRef:
                name: $CI_PROJECT_NAME
          name: $CI_PROJECT_NAME
          ports:
            - containerPort: 8080
              name: 8080tcp
              protocol: TCP
          resources:
            limits:
              cpu: 100m
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
            - mountPath: /etc/localtime
              name: host-time
              readOnly: true
      restartPolicy: Always
      volumes:
        - hostPath:
            path: /etc/localtime
            type: ""
          name: host-time
---
apiVersion: v1
kind: Service
metadata:
  name: $CI_PROJECT_NAME
spec:
  ports:
    - name: http80
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: $CI_PROJECT_NAME
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: $CI_PROJECT_NAME
spec:
  rules:
    - host: $CI_PROJECT_NAME
      http:
        paths:
          - backend:
              serviceName: $CI_PROJECT_NAME
              servicePort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: $CI_PROJECT_NAME
data:
  HTTP_PORT: "8080"
